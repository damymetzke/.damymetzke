[alias]
    ### Logging
    # Simple graph log using 1 line
    lg = log --oneline \
        --format="\"format:%C(#ff9500)%G? %C(#d596f3)%h %C(ul #fa4762)%aN%C(reset) %C(#dbffe8)%s%C(auto)%d\""
    graph = log --graph --oneline \
        --format="\"format:%C(#d596f3)%h %C(ul #fa4762)%aN%C(reset) %C(#dbffe8)%s%C(auto)%d\""
    # Advanced log with more information but uses more lines
    lgall = log \
--format="\"format:%C(#d596f3)%H%C(auto)%d%n\
%C(reset)Author:    %C(ul #fa4762)%aN%C(reset) %C(#75fdff)< %aE >%C(#fa4762)%n\
Committer: %C(ul #fa4762)%cN%C(reset) %C(#75fdff)< %cE >%C(reset)%n\
Date:      %C(#ffe74d)%aD%n\
%C(#dbffe8)%s%n\
%C(#696a86)────────────────────────────────────────\""

    # Log only the first parent and show description, compatible with GitHub pull request workflows
    lgpr = !git log --first-parent --oneline --color=always \
    --format="\"format:%C(#d596f3)%h %C(ul #fa4762)%aN%C(reset) %C(#e8c030)%b\""\
    | sed '/^$/d'

    # Log only the first parent, useful for logging when writing features
    lgft = log --first-parent --oneline --format="\"format:%C(#d596f3)%h %C(ul #fa4762)%aN%C(reset) %C(#dbffe8)%s%C(auto)%d\""

    ### Workflow
    # Fetch all from remote and prune
    fch = fetch --all --prune
    # Switch to latest main by pulling from remote, also fetches all other branches
    tom = !git switch main && git fetch --all --prune && git pull
    # Create branch and push it to remote
    cr = !git switch -C $@ && git push --set-upstream origin $1 && :
    # Status
    s = status
    # Commit
    c = commit -v -S
    # Commit all
    ca = !git add . && git commit -v -S \"$@\" && :
    # Push
    p = push
    # Interactive rebase
    ir = rebase -i

    ### Etc
    # Show a commit
    shw = show --format="\"%C(#d596f3)%H%n\
Author:    %C(ul #fa4762)%aN%C(reset) %C(#75fdff)< %aE >%n\
Committer: %C(ul #fa4762)%cN%C(reset) %C(#75fdff)< %cE >%n\
Date:   %C(#ffe74d)%aD%n%n\
%C(#dbffe8)%s%n%n\
%C(#cfe3df)%b%n%n\""

    # Show branches
    br = branch -avv
    # Show more information about branches
    brall = for-each-ref \
--format="\"local:  %(color: #a4ce64)%(refname:lstrip=2)%(color: reset)%0a\
remote: %(color: #fa4762)%(upstream:lstrip=2)%(color: reset)%0a\
commit: %(color: #51aac8)%(subject)%(color: reset)%0a\
%(color: #606a86).\"" refs/heads

    # Create a PR using the GitHub CLI (gh)
    # Primarily here so it can be overridden 
    pr = !gh pr create
