#! /usr/bin/env python

import sys


def process_data_file(file_path):
    result = []
    with open(file_path, 'r') as file:
        for line_num, line in enumerate(file, start=1):
            # Strip leading and trailing whitespace from the line
            line = line.strip()

            # Skip empty lines and comments
            if not line or line[0] == "#":
                continue

            if line[0] == "!":
                result.append(line[1:])
                continue

            # Split the line based on whitespace
            parts = line.split()

            # Check if the line has 2 or 3 parts
            if len(parts) < 2 or len(parts) > 3:
                print(f"Error: Line {line_num} does not contain 2 or 3 parts.", file=sys.stdout)
                continue

            # Extract the first two parts as strings
            part1, part2 = parts[:2]

            # Try to extract the third part as a float if it exists
            if len(parts) == 3:
                try:
                    part3 = float(parts[2])
                except ValueError:
                    print(f"Error: Line {line_num}, third part is not a float.", file=sys.stdout)
                    continue
            else:
                part3 = 1.0
            result.append([part1, part2, part3])
    return result

def to_hours(value):
    if len(value) != 5:
        return None
    if value[2] != ":":
        return None
    
    try:
        hours = int(value[:2])
        minutes = int(value[3:])
    except ValueError:
        return None
    
    return hours + minutes / 60

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script_name.py data_file_path", file=sys.stderr)
        sys.exit(1)

    data_file_path = sys.argv[1]

    hours = 0.0
    name = "default"

    result = []

    for item in process_data_file(data_file_path):
        if isinstance(item, str):
            if hours > 0:
                result.append([name, hours])
                hours = 0.0
            name = item
            continue
        
        [start_raw, end_raw, modifier] = item

        start = to_hours(start_raw)
        end = to_hours(end_raw)

        if start is None:
            print(f"Error: Invalid time format: '{start_raw}'", file=sys.stdout)

        if end is None:
            print(f"Error: Invalid time format: '{end_raw}'", file=sys.stdout)

        if start is None or end is None:
            exit(1)

        if start >= end:
            print(f"Error: start must be smaller than end, but {start_raw} >= {end_raw}", file=sys.stdout)
            exit(1)

        hours += (end - start) * modifier

    if hours > 0.0:
        result.append([name, hours])


    for value in result:
        [name, hours] = value
        print(f"{name} {hours}")
