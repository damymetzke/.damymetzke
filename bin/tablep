#! /usr/bin/env python3

# A pretty printed table
#
# Usage:
# Content should be streamed using stdin.
# Each argument represents a column.
# Columns are always space separated.
# Each column is named in the final output.
# Columns can have modifiers, these will be separated by ':'.
# E.g. the argument `title:b64`, has the header `title`, with the `b64` modifier.
#
# Valid modifiers:
# b64: The input is base64 encoded, this modifier will decode it.
# pad: Add a single space before and after each value.

import sys
import base64

columnHeaders = sys.argv[1:]
actions = []

for i, header in enumerate(columnHeaders):
    all = header.split(":")
    actions.append(all[1:])
    if "pad" in actions[i]:
        columnHeaders[i] = " " + all[0] + " "
    else:
        columnHeaders[i] = all[0]


columnRows = []

for i in range(len(sys.argv) - 1):
    columnRows.append([])

for line in sys.stdin:
    for i, column in enumerate(line.replace("\n", "").split(" ")):
        result = column;
        if "b64" in actions[i]:
            result = base64.b64decode(column).decode("utf-8").replace("\n", "")
        if "pad" in actions[i]:
            result = " " + result + " "
        columnRows[i].append(result)


columnWidths = [];
for i in range(len(sys.argv) - 1):
    width = len(columnHeaders[i])
    for row in columnRows[i]:
        width = max(width, len(row))
    columnWidths.append(width)

for i, width in enumerate(columnWidths):
    columnHeaders[i] = columnHeaders[i].ljust(width, " ")
    for j, row in enumerate(columnRows[i]):
        columnRows[i][j] = row.ljust(width, " ")

rows = []
for i in range(len(columnRows[0])):
    row = []
    for column in columnRows:
        row.append(column[i])
    rows.append(row)

verticalSeparators = [];
for width in columnWidths:
    verticalSeparators.append("─" * width)

# Top
print("┌", end="")
print("┬".join(verticalSeparators), end="")
print("┐")

# Headers
print("│", end="")
print("│".join(columnHeaders), end="")
print("│")

# Headers separator
print("├", end="")
print("┼".join(verticalSeparators), end="")
print("┤")

# Rows
for row in rows:
    print("│", end="")
    print("│".join(row), end="")
    print("│")

# Bottom
print("└", end="")
print("┴".join(verticalSeparators), end="")
print("┘")
